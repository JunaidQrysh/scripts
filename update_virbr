#!/usr/bin/bash

# Function to get current network IP (first three octets)
get_network_base() {
    current_ip=$(ip route get 1.1.1.1 | grep -oP 'src \K[^ ]+')
    if [[ -z "$current_ip" ]]; then
        exit 1
    fi
    echo "${current_ip%.*}."
}

# Function to update IP addresses in XML while preserving last octet
update_xml() {
    local xml_content="$1"
    local network_base="$2"

    # Remove trailing dot from network_base
    network_base="${network_base%.}"
    
    local current_ip=$(echo "$xml_content" | grep -oP "address='[^']+'" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
    local range_start=$(echo "$xml_content" | grep -oP "start='[^']+'" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
    local range_end=$(echo "$xml_content" | grep -oP "end='[^']+'" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')

    # Validate extracted values
    if [[ -z "$current_ip" || -z "$range_start" || -z "$range_end" ]]; then
        return 1
    fi

    local ip_last_octet=$(echo "$current_ip" | cut -d'.' -f4)
    local range_start_last_octet=$(echo "$range_start" | cut -d'.' -f4)
    local range_end_last_octet=$(echo "$range_end" | cut -d'.' -f4)

    local new_ip="${network_base}.${ip_last_octet}"
    local new_range_start="${network_base}.${range_start_last_octet}"
    local new_range_end="${network_base}.${range_end_last_octet}"

    echo "$xml_content" | sed -E \
        -e "s|address='[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'|address='$new_ip'|" \
        -e "s|start='[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'|start='$new_range_start'|" \
        -e "s|end='[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'|end='$new_range_end'|"
}

cleanup() {
    [[ -f "$temp_xml" ]] && rm -f "$temp_xml"
    [[ -f "$new_xml" ]] && rm -f "$new_xml"
}
trap cleanup EXIT

# Main script
network_name="${1:-default}"
network_base=$(get_network_base)

temp_xml=$(mktemp)
new_xml=$(mktemp)

virsh net-dumpxml "$network_name" > "$temp_xml" || {
    exit 1
}

updated_content=$(update_xml "$(cat "$temp_xml")" "$network_base") || exit 1
echo "$updated_content" > "$new_xml"

virsh net-destroy "$network_name" > /dev/null 2>&1
virsh net-define "$new_xml" || exit 1
virsh net-start "$network_name" || exit 1
